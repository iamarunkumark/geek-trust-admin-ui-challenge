import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchUserData } from './tableAPI';

export type User = {
    email: string;
    id: string;
    name: string;
    role: string;
}

export interface TableState {
  value: User[];
  status: 'idle' | 'loading' | 'success' | 'failed';
}

const initialState: TableState = {
  value: [] as User[],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchUserDataAsync = createAsyncThunk(
  'table/fetchUserData',
  async () => {
    const response = await fetchUserData();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const tableSlice = createSlice({
  name: 'table',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    editUser: (state, action: PayloadAction<User>) => {
        const userIndex = state.value.findIndex((user => user.id === action.payload.id));
        state.value[userIndex] = action.payload;
    },
    deleteUser: (state, action : PayloadAction<string>) => {
        state.value = state.value.filter(function(user){ 
            return user.id !== action.payload;
        });
    },
    deleteMultipleUsers: (state, action : PayloadAction<string[]>) => {
        state.value = state.value.filter(function(user){ 
            const isUserPresent = action.payload.find(id => id === user.id);
            return isUserPresent === undefined;
        });
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchUserDataAsync.pending, (state) => {
        state.status = 'loading';
        state.value = [] as User[];
      })
      .addCase(fetchUserDataAsync.fulfilled, (state, action) => {
        state.status = 'success';
        state.value = action.payload;
      })
      .addCase(fetchUserDataAsync.rejected, (state) => {
        state.status = 'failed';
        state.value = [] as User[];
      });
  },
});

export const { editUser, deleteUser, deleteMultipleUsers } = tableSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state: RootState) => state.table.value;
export const selectUserAPIStatus = (state: RootState) => state.table.status;

export default tableSlice.reducer;
